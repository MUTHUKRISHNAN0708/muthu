# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a6NV8KpyJmWBN-DZ9e9AtRqMY4PsoOdm
"""

import time
import random
import matplotlib.pyplot as plt
def linear_search(arr, target):
    for index, value in enumerate(arr):
        if value == target:
            return index
    return -1
def time_linear_search(n):
    arr = random.sample(range(1, 10*n), n)
    target = random.choice(arr)
    start_time = time.time()
    linear_search(arr, target)
    end_time = time.time()
    return end_time - start_time
times = []
sizes = []
for n in range(100, 1001, 100):
    time_taken = time_linear_search(n)
    times.append(time_taken)
    sizes.append(n)
plt.figure(figsize=(10, 6))
plt.plot(sizes, times, marker='o', linestyle='-', color='b')
plt.title("Linear Search Time Complexity")
plt.xlabel("Number of Elements (n)")
plt.ylabel("Time Taken (seconds)")
plt.grid(True)
plt.show()
import time
import random
import matplotlib.pyplot as plt
def linear_search(arr, target):
    for index, value in enumerate(arr):
        if value == target:
            return index
    return -1
def time_linear_search(n):
    arr = random.sample(range(1, 10*n), n)
    target = random.choice(arr)
    start_time = time.time()
    linear_search(arr, target)
    end_time = time.time()
    return end_time - start_time
times = []
sizes = []
for n in range(100, 1001, 100):
    time_taken = time_linear_search(n)
    times.append(time_taken)
    sizes.append(n)
plt.figure(figsize=(10, 6))
plt.plot(sizes, times, marker='o', linestyle='-', color='b')
plt.title("Linear Search Time Complexity")
plt.xlabel("Number of Elements (n)")
plt.ylabel("Time Taken (seconds)")
plt.grid(True)
plt.show()