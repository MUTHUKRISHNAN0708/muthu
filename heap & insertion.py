# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BpNi8WRqy2EfTR4K_bVMQ3-rkptgsTNN
"""

import time
import random
import heapq
import matplotlib.pyplot as plt
def insertion_sort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and arr[j] > key:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key
    return arr
def heap_sort(arr):
    heapq._heapify_max(arr)
    sorted_arr = []
    while arr:
        sorted_arr.append(heapq._heappop_max(arr))
    return sorted_arr
def time_sorting_algorithm(sort_function, n):
    arr = random.sample(range(1, 10*n), n)
    start_time = time.time()
    sort_function(arr)
    end_time = time.time()
    return end_time - start_time
times_insertion = []
times_heap = []
sizes = []
for n in range(100, 1001, 100):  # From 100 to 1000, step 100
    sizes.append(n)
    time_insertion = time_sorting_algorithm(insertion_sort, n)
    times_insertion.append(time_insertion)
    time_heap = time_sorting_algorithm(heap_sort, n)
    times_heap.append(time_heap)
plt.figure(figsize=(10, 6))
plt.plot(sizes, times_insertion, marker='o', linestyle='-', color='b', label='Insertion Sort')
plt.plot(sizes, times_heap, marker='o', linestyle='-', color='r', label='Heap Sort')
plt.title("Sorting Time Complexity")
plt.xlabel("Number of Elements (n)")
plt.ylabel("Time Taken (seconds)")
plt.legend()
plt.grid(True)
plt.show()